#!/usr/bin/php

<?php

/**
 * Copyright 2018 Peter Streltsov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

use streltcov\YandexUtils\GeoCoder;
use streltcov\geocoder\Config;

system('clear');

$autoload = '../vendor/autoload.php';
require_once $autoload;

class CliApp
{

    private $geodata = null;
    private $selected = null;
    private $message = null;
    private $command;
    private $menu;

    private static $main_menu = [
        "1 - search geo data (address)",
        "2 - search geo data (coordinates)",
        "3 - set language",
        "4 - show parameters",
        "5 - exit"
    ];

    private static $collection_menu = [
        "1 - select exact position",
        "2 - show results list",
        "3 - select position by number (starts from 0)",
        "4 - go back"
    ];

    private static $object_menu = [
        "1 - show description",
        "2 - show address",
        "3 - show country",
        "4 - show coordinates",
        "5 - show kind",
        "6 - show precision",
        "7 - show postal code",
        "8 - show province",
        "9 - show locality",
        "10 - show street",
        "11 - search context by coordinates",
        "12 - go back"
    ];

    public function __construct()
    {

        $this->main();

    } // end construct


    private function header()
    {

        system('clear');
        $data = $this->geodata;
        echo PHP_EOL;
        echo "     YANDEX GEOCODER" . PHP_EOL;
        echo PHP_EOL;
        echo "===========================================================================" . PHP_EOL;
        echo PHP_EOL;
        echo "STATUS: " . $this->message . PHP_EOL;
        echo "===========================================================================" . PHP_EOL;

        if ($data != null) {

            $data->hasExact() ? $found = 'Yes' : $found = 'No';
            echo PHP_EOL;
            echo "Results found: " . $data->found() . PHP_EOL;
            echo "Exact position: " . $found . PHP_EOL;
            echo "===========================================================================" . PHP_EOL;
        }

    } // end function


    private function command()
    {

        echo PHP_EOL;
        echo "===========================================================================" . PHP_EOL;
        echo "***************************************************************************" . PHP_EOL;
        echo "COMMAND: " . $this->command . PHP_EOL;
        echo "***************************************************************************" . PHP_EOL;

    }

    private function plotMenu($menuname)
    {

        $this->menu = static::$$menuname;

        foreach ($this->menu as $item) {
            echo $item . PHP_EOL;
        }

    } // end function



    /**
     * provides main application scope
     */
    private function main()
    {

        system('clear');

        while (true) {

            $this->header();
            echo PHP_EOL . "Select option:" . PHP_EOL . PHP_EOL;
            $this->plotMenu('main_menu');

            echo PHP_EOL;
            echo "=>";

            $answer = trim(fgets(STDIN));

            switch ($answer) {
                case '1':
                    echo PHP_EOL;
                    echo "Type address:";
                    $address = trim(fgets(STDIN));
                    $this->geoCollection($address);
                    break;
                case '2':
                    echo "Search coordinates:";
                    $coordinates = trim(fgets(STDIN));
                    $this->geoCollection($coordinates, 'context');
                    break;
                case '3':
                    echo "Available languages: (1)RU, (2)US, (3)EN, (4)UA, (5)BY, (6)TR" . PHP_EOL;
                    $locale = trim(fgets(STDIN));
                    switch ($locale) {
                        case '1':
                            GeoCoder::locale('RU');
                            break;
                        case '2':
                            GeoCoder::locale('US');
                            break;
                        case '3':
                            GeoCoder::locale('EN');
                            break;
                        case '4':
                            GeoCoder::locale('UA');
                            break;
                        case '5':
                            GeoCoder::locale('BY');
                            break;
                        case '6':
                            GeoCoder::locale('TR');
                            break;
                        default:
                            break;
                    }
                    $this->message = 'Language set to ' . Config::get('lang');
                    break;
                case '4':
                    $this->message = 'locale - ' . Config::get('lang') . ", skip - " . Config::get('skip') . ", kind - " . Config::get('kind');
                    break;
                case '5':
                    system('clear');
                    exit();
                    break;
                default:
                    $this->main();
                    break;
            }
        }

    } // end function



    /**
     * provides scope to work with geo collection
     */
    private function geoCollection($query, array $parameters = null)
    {

        if (isset($parameters)) {
            $this->geodata = GeoCoder::searchContext($query, $parameters);
        } else {
            $this->geodata = GeoCoder::search($query);
        }

        while(true) {
            $this->header();
            echo PHP_EOL;
            echo "Select option: " . PHP_EOL;
            $this->plotMenu('collection_menu');

            echo PHP_EOL;
            echo "=>";
            $answer = trim(fgets(STDIN));

            switch ($answer) {
                case '1':
                    if ($this->geodata->hasExact()) {
                        $this->selected = $this->geodata->exact();
                        $this->message = 'Exact object selected' . PHP_EOL;
                        return $this->geoObject();
                    } else {
                        $this->message = 'No exact object in collection' . PHP_EOL;
                    }
                    break;
                case '2':
                    $all = $this->geodata->all();
                    echo PHP_EOL . PHP_EOL;
                    echo "Listed objects:" . PHP_EOL;
                    foreach ($all as $key => $item) {
                        echo $key . ' - ' . $item->getDescription() . PHP_EOL;
                    }
                    fgets(STDIN);
                    break;
                case '3':
                    echo PHP_EOL;
                    echo "Type number: ";
                    $number = (int)trim(fgets(STDIN));
                    $all = $this->geodata->all();
                    if (isset($all[$number])) {
                        $this->selected = $all[$number];
                        $this->message = 'Selected object no.' . $number . PHP_EOL;
                        return $this->geoObject();
                    } else {
                        $this->message = 'Requested object does not exist' . PHP_EOL;
                    }
                    break;
                case '4':
                    return $this->main();
                    break;
            }
        }

    } // end function



    /**
     * provides scope to work with geo object
     */
    private function geoObject()
    {

        if ($this->selected == null) {
            $this->message = 'GeoObject is empty!' . PHP_EOL;
            return;
        }

        while (true) {
            system('clear');
            $this->header();
            $this->plotMenu('object_menu');
            $this->command();

            echo PHP_EOL;
            echo "=>";
            $answer = trim(fgets(STDIN));

            switch ($answer) {
                case '1':
                    $this->command = $this->selected->getDescription();
                    break;
                case '2':
                    $this->command = $this->selected->getAddress();
                    break;
                case '3':
                    $this->command = $this->selected->getCountry();
                    break;
                case '4':
                    $this->command = $this->selected->getCoordinates();
                    break;
                case '5':
                    $this->command = $this->selected->getKind();
                    break;
                case '6':
                    $this->command = $this->selected->getPrecision();
                    break;
                case '7':
                    $this->command = $this->selected->getPostalCode();
                    break;
                case '8':
                    $this->command = $this->selected->getProvince();
                    break;
                case '9':
                    $this->command = $this->selected->getLocality();
                    break;
                case '10':
                    $this->command = $this->selected->getStreet();
                    break;
                case '11':
                    return $this->geoCollection($this->selected->getCoordinates());
                    break;
                case '12':
                    return $this->geoCollection($this->selected->getCoordinates());
                    break;
                default:
                    break;
            }
        }

    }// end function

} // end class


new CliApp();
